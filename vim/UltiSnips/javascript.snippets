snippet import "Regular import"
import ${1:module} from '$2';
endsnippet

snippet nimport "Named import"
import { ${1:module} } from '$2';
endsnippet

snippet export
export ${1:default} ${2:definition};
endsnippet

snippet default
export default $0;
endsnippet

snippet class
class ${1:Name} {
	constructor($2) {
		$3
	}
}
endsnippet

snippet get
get ${1:property}() {
	return $0;
}
endsnippet

snippet set
set ${1:property}(value) {
	$0
}
endsnippet

snippet property
get ${1:property}() {
  return this.$1;
}

set $1(value) {
  this.$1 = value;
}
endsnippet

snippet let
let ${1:variable} = ${2:value};
endsnippet

snippet const
let ${1:variable} = ${2:value};
endsnippet

snippet log
console.log($0);
endsnippet

snippet warn
console.warn($0);
endsnippet

snippet error
console.error($0);
endsnippet

snippet info
console.info($0);
endsnippet

snippet use
'use strict';
endsnippet

snippet iife
(function(${2:exports}) {
  'use strict';

  $0
})(${1:this});
endsnippet

snippet var
var ${1:variable} = ${2:value};
endsnippet

snippet new
${1:const} ${2:instance} = new ${3:Class}($0);
endsnippet

snippet fn
function ${1:name}($2) {
  $0
}
endsnippet

snippet arr
${1:const} ${2:list} = [$0];
endsnippet

snippet obj
${1:const} ${2:object} = \{$0\};
endsnippet

snippet switch
switch(${1:expression}) {
  case ${2:value}:
    $0
  break;
}
endsnippet

snippet if
if (${1:condition}) {
  $0
}
endsnippet

snippet else
if (${1:condition}) {
  ${2:statement}
} else {
  $0
}
endsnippet

snippet module
function ${1:Module}($2) {
  $3
}

$1.prototype.initialize = function($4) {
  $0
};

return $1;
endsnippet

snippet req
var ${1:module} = require('${2:$1}');
endsnippet

snippet exp
module.exports = $0;
endsnippet

snippet umd
if (typeof define === 'function' && define.amd) {
	define(function() { return ${1:module}; });
} else if (typeof module !== 'undefined' && module.exports) {
	module.exports = $1;
} else {
	exports.$1 = $1;
}
endsnippet

snippet =>
($1) => {
	$2
}
endsnippet

snippet react
import React from 'react';
endsnippet

snippet reactp
import React, { PropTypes } from 'react';
endsnippet

snippet reactc
import React, { Component } from 'react';
endsnippet

snippet reactcp
import React, { Component, PropTypes } from 'react';
endsnippet

snippet fcomp
const ${1:Component} = (${2:props}) => (
	$3
);

export default $1;
endsnippet

snippet comp
class ${1:Component} extends Component {
	constructor(props) {
		super(props);
	}

	render() {
		return (
			$2
		);
	}
}
endsnippet

snippet css
import css from './`!p snip.rv = snip.basename`.css';
endsnippet

snippet scss
import css from './`!p snip.rv = snip.basename`.scss';
endsnippet

snippet bind
this.${1:functionName} = this.$1.bind(${2:this});
endsnippet

snippet ctor
constructor(${1:props}) {
	super($1);
}
endsnippet

snippet cdm
componentDidMount() {
	$1
}
endsnippet

snippet cwrp
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet
